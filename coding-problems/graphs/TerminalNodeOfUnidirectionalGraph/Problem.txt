Given any given starting point in a unidirectional graph, find the terminal (last) node.

Each node connects to at most one other node.
If a loop is encountered while traversing the network, return ID of the
last node traversed before closing the loop.
 
Implement the following method:

int FindNetworkEndpoint(int startNodeId, int[] fromIds, int[] toIds)

Parameters:
  startNodeId - The ID of the node to start traversing on.
  fromIds - Related to toIds. An ordered list of node parent IDs.
  toIds - Related to fromIds. An ordered list of node children IDs.

Returns:
  The ID of the last node in a unidirectional graph.


Constraints:

1.fromIds.Length == toIds.Length and are not empty, but both are not assumed
  to be ordered in any way aside from index relation.
2. 0 < number of links < 10,000
3. No nodes connected to themselves.
4. All node IDs are unique (fromIds meets criteria for a set data structure).
5. Cycles in the network are possible.


Example 1: Directed Acyclic Graph (DAG), no loop
------------------------------------------------

fromIds = [6, 3, 7, 4, 9, 2, 1]
  toIds = [9, 4, 3, 6, 5, 6, 3]

  7
   \
    v
1-->3-->4-->6-->9-->5
            ^
           /
          2

For all startNodeIds, the last node ID will be 5.


Example 2: simple Directed Cyclic Graph (DCG) with a single loop
----------------------------------------------------------------

fromIds: [1, 0]
  toIds: [0, 1]

0-->1
^    \
 \   /
  ---

For startNodeID 0, the last node ID will be 1.
For startNodeID 1, the last node ID will be 0.


Example 3: Directed Cyclic Graph (DCG) with a single loop
---------------------------------------------------------

fromIds = [5, 6, 4, 1, 7, 3, 2]
  toIds = [3, 2, 1, 7, 2, 1, 5]

    6         4
     \         \
      v         v
7-->2-->5-->3-->1
^                \
 \               /
  ---------------

For startNodeID 5, the last node ID will be 2.
For startNodeIDs 4 and 1, the last node ID will be 3.
For startNodeIDs 6 and 7, the last node ID will be 7.
etc.
