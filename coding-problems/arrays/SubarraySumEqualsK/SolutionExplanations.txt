Solution Explanations
---------------------

1. Brute Force

The naive/"brute force" implementation tries out every subarray in the nums array, testing for a sum matching targetSum.

For instance, given nums = {1, 2, 3, 4, 5} and targetSum = 5:

  Try {1}               = 1
    Try {1, 2}          = 3
    Try {1, 2, 3}       = 6
    Try {1, 2, 3, 4}    = 10
    Try {1, 2, 3, 4, 5} = 15
  Try {2}               = 2
    Try {2, 3}          = 5 (match)
    Try {2, 3, 4}       = 9
    Try {2, 3, 4, 5}    = 14
  Try {3}               = 3
    Try {3, 4}          = 7
    Try {3, 4, 5}       = 12
  Try {4}               = 4
    Try {4, 5}          = 9
  Try {5}               = 5 (match)

Most subarrays will not match, but the answer of 2 is found regardless.
This has O(N^2) runtime and is not efficient for much larger data sets.


2. Comparing Difference of Current vs Prior Sums

The more efficient implementation only traverses the array once, tracking and comparing "prefix" or prior sums with each new running sum encountered. This has O(N) runtime.

Track the current sum via a running total while traversing the array, and if a sum is found that matches targetSum, a match has been found.
A dictionary (data structure with unique keys and associated values) is used to track ongoing subarray sums (keys) and the number of times those sums have been encountered while traversing the array (values):
  a. For each new sum encountered, check to see if the difference between this new sum and a previously encountered subarray sum (key in dictionary) is equal to targetSum. If a key in the dictionary is found such that current sum - key = targetSum, it means there are matching subarrays ending at this index is equal to the number of times that prior sum has been encountered before (value associated with key in dictionary).
  b. Afterwards, track current sum in dictionary:
    i. If a new sum is found, set that sum as the key and 1 as the value.
    OR
    ii. If the sum has already been encountered before, increment the value associated with that key by 1.

For instance, given nums = {1, 2, 3, 4, 5} and targetSum = 5:

  Encounter 1 in array
    Running sum = 1, doesn't match 5
    Check dictionary for key x such that 1 - x = 5
      x = -4
      Key of -4 not found in dictionary, no matches
    Add a new key-value pair of 1->1 to the dictionary, since the sum of 1 has only been encountered once so far.
    Current dictionary: {1->1}
  
  Encounter 2 in array
    Running sum = 3, doesn't match 5
    Check dictionary for key x such that 3 - x = 5
      x = -2
      Key of -2 not found in dictionary, no matches
      Add a new key-value pair of 3->1 to the dictionary, since the sum of 3 has only been encountered once so far.
    Current dictionary: {1->1, 3->1}

  Encounter 3 in array
    Running sum = 6, doesn't match 5
    Check dictionary for key x such that 6 - x = 5
      x = 1
      Key of 1 exists in dictionary, value at Key=1 is 1 (+1 match)
    Add a new key-value pair of 6->1 to the dictionary, since the sum of 6 has only been encountered once so far.
    Current dictionary: {1->1, 3->1, 6->1}

  Encounter 4 in array
    Running sum = 10, doesn't match 5
    Check dictionary for key x such that 10 - x = 5
      x = 5
      Key of 5 not found in dictionary, no matches
      Add a new key-value pair of 10->1 to the dictionary, since the sum of 10 has only been encountered once so far.
    Current dictionary: {1->1, 3->1, 6->1, 10->1}

  Encounter 5 in array
    Running sum = 15, doesn't match 5
    Check dictionary for key x such that 15 - x = 5
      x = 10
      Key of 10 exists in dictionary, value at Key=10 is 1 (+1 match)
      Add a new key-value pair of 15->1 to the dictionary, since the sum of 15 has only been encountered once so far.
    Current dictionary: {1->1, 3->1, 6->1, 10->1, 15->1}


This algorithm seems complex on the surface, but is mathematically straightforward via exclusion calculated by sum differences.


Take for instance, when the number 3 is encountered. The following subarrays/sums have been encountered so far:

  {1} = 1
  {1, 2} = 3

The new subarray/sum to consider is:
  {1, 2, 3} = 6

Scanning the full array {1, 2, 3, 4, 5} makes it clear that {2, 3} is a subarray match. This is where calculating the difference between sums comes into play.

To check for a matching subarray at number 3 in the array, we need to test the differences between the current subarray {1, 2, 3} and past subarrays. Because all previous subarrays are continuous, each one is a continuation of the last subarray, and thus each new subarray contains all past subarrays. Thus, checking the difference between them to try to find a result equal to targetSum yields matching results:

  Comparing {1} to {1, 2, 3} yields a match because the difference between {1} and {1, 2, 3} is {2, 3}, which has a sum of 5.
  Comparing {1, 2} to {1, 2, 3} does not yield a match because the difference between {1, 2} and {1, 2, 3} is {3}, which has a sum of 3.

The above comparison is more for visual breakdown. The algorithm doesn't need to operate on subarrays because they are continuous. Thus, only the difference of subarray sums need to be compared to yield proper results:

  Comparing {1} (sum of 1) to {1, 2, 3} (sum of 6) = 6 - 1 = 5, which is a match.
  Comparing {1, 2} (sum of 3) to {1, 2, 3} (sum of 6) = 6 - 3 = 3, which is not a match.

This comparison is done easily by checking the dictionary to see if such a sum exists as a key, comparing the current sum to all prior sums relative to targetSum in a single operation for a match:

  Current dictionary at {1, 2, 3} at time of comparison is {1->1, 3->1}
  Current sum is 6
  Need to see if x is an existing key in dictionary such that 6 - x = 5
  x = 1
  Dictionary keys are (1, 3)
  Key=1 exists, match found


Putting this all together, in the final iteration of the algorithm when the number 5 is encountered, the following subarrays/sums have been encountered so far:

  {1} = 1
  {1, 2} = 3
  {1, 2, 3} = 6
  {1, 2, 3, 4} = 10

The current dictionary at the time is:
{
  1->1
  3->1
  6->1
  10->1
}

The new subarray/sum to consider is:

  {1, 2, 3, 4, 5} = 15

The sum/key to try to find is x where 15 - x = 5 to see if targetSum exists in their difference:
  x = 10
  Sums/Keys in dictionary are {1, 3, 6, 10}
  10 exists as sum/key in dictionary, value at Key=10 is 1, match +1


A more complex example with negative numbers and a negative targetSum:
nums = {10, 2, -2, -20, 10}
targetSum = -10

  Encounter 10 in array
    Running sum = 10, doesn't match -10
    Check dictionary for key x such that 10 - x = -10
      x = 20
      Key of 20 not found in dictionary, no matches
    Add a new key-value pair of 10->1 to the dictionary, since the sum of 10 has only been encountered once so far.
    Current dictionary: {10->1}
  
  Encounter 2 in array
    Running sum = 12, doesn't match -10
    Check dictionary for key x such that 12 - x = -10
      x = 22
      Key of 22 not found in dictionary, no matches
    Add a new key-value pair of 12->1 to the dictionary, since the sum of 12 has only been encountered once so far.
    Current dictionary: {10->1, 12->1}
    
  Encounter -2 in array
    Running sum = 10, doesn't match -10
    Check dictionary for key x such that 10 - x = -10
      x = 20
      Key of 20 not found in dictionary, no matches
    Key of 10 already exists in dictionary, increment value to 2 since the sum of 10 has now been encountered twice so far.
    Current dictionary: {10->2, 12->1}
  
  Encounter -20 in array
    Running sum = -10, matches targetSum (match +1)
    Check dictionary for key x such that -10 - x = -10
      x = 0
      Key of 0 not found in dictionary, no matches
    Add a new key-value pair of -10->1 to dictionary, since the sum of -10 has only been encountered once so far.
    Current dictionary: {10->2, 12->1, -10->1}
  
  Encounter 10 in array
    Running sum = 0, doesn't match -10
    Check dictionary for key x such that 0 - x = -10
      x = 10
      Key of 10 found in dictionary, value at Key=1 is 2 (match +2)
    Add a new key-value pair of 0->1 to dictionary, since the sum of 0 has only been encountered once so far.
    Current dictionary: {10->2, 12->1, -10->1, 0->1}

The algorithm found the three matching subarrays:
  {10, 2, -2, -20}
      {2, -2, -20, 10}
             {-20, 10}
