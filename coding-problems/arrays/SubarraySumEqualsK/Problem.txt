Given an array of integers and a target sum, return the total number of continuous subarrays whose sum equals the target sum.
This is more commonly known as the "Subarray sum equals k" problem, where k = target sum.
A subarray is defined as all or part of a contiguous (not skipping elements) sequence of elements within the given array.

Implement the following method:

int SubarraySums(int[] nums, int targetSum)

Parameters:
  nums - Unordered array of integers.
  targetSum - Sum to match with sums of subarrays inside of nums array.

Returns:
  The number of subarrays found in nums with sum equal to targetSum.


Constraints:

1. nums.Length >= 1
2. -100 <= nums[i] <= 100


Example 1:
----------

nums = {1, 1, 1}
targetSum = 2

There are 2 subarrays with sum of 2:
  {1, 1}
     {1, 1}



Example 2:
----------

nums = {1, 2, 3}
targetSum = 4

There are 0 subarrays with sum of 4.


Example 3:
----------

nums = {1, 3, 1, 1, 2, 2}
targetSum = 4

There are 4 subarrays with sum of 4:
  {1, 3}
     {3, 1}
        {1, 1, 2}
              {2, 2}


Example 4:
----------
 
nums = {10, 2, -2, -20, 10}
targetSum = -10

There are 3 subarrays with sum of -10:
  {10, 2, -2, -20}
      {2, -2, -20, 10}
             {-20, 10}
